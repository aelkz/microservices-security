# =============================================
# springboot configurations
# ---------------------------------------------
spring:
  application:
    name: ${OPENSHIFT_APP_NAME:fuse-auth-integration-api}
  datasource:
    initialize: false

api:
  title: ${OPENSHIFT_APP_NAME:fuse-auth-integration-api}
  description: secured fuse application with keycloak adapter
  version: 1
  hostname: ${OPENSHIFT_HOST_NAME:auth-integration-api-microservices-security.apps.arekkusu.io}

logging:
  config: classpath:logback.xml
  level: INFO

# options from org.apache.camel.spring.boot.CamelConfigurationProperties can be configured here
camel:
  springboot:
    name: ${OPENSHIFT_APP_NAME:fuse-auth-integration-api}
    main-run-controller: true
  component:
    servlet:
      mapping:
        contextPath: /api/v${api.version}/*
    jmxEnabled: true

# lets listen on all ports to ensure we can be invoked from the pod ip address
server:
  address: 0.0.0.0
  port: 8080

# lets use a different management port in case you need to listen to HTTP requests on 8080
management:
  security:
    enabled: false
  address: 0.0.0.0
  port: 8081
  metrics:
    export:
      prometheus:
        enabled: true

# =============================================
# springboot actuator configurations
# ---------------------------------------------
# disable all management endpoints except health
endpoints:
  enabled: false
  health:
    enabled: true
  metrics:
    enabled: true
  prometheus:
    enabled: true
    # if you want to change the default prometheus endpoint, just change the 'id' to another value.
    id: prometheus

# =============================================
# opentracing configurations
# ---------------------------------------------
opentracing:
  jaeger:
    enabled: true
    enable-b3-propagation: true
    log-spans: true
    const-sampler:
      decision: true
    http-sender:
      url: "http://jaeger-collector:14268/api/traces"

jaeger.tracer:
  host: ${OPENSHIFT_JAEGER_HOST:jaeger-agent.microservices.svc}
  port: 6831

# =============================================
# auth-integration health parameters
# ---------------------------------------------
metrics:
  host: ${OPENSHIFT_METRICS_HOST:"auth-integration-api-metrics.microservices-security.svc.cluster.local"}
  port: 8081
  context-path: health

# =============================================
# product api parameters
# ---------------------------------------------
product:
  api-key-name: product
  host: ${OPENSHIFT_PRODUCT_HOST:"product-api.microservices-security.svc.cluster.local"}
  port: 8080
  context-path: ${OPENSHIFT_PRODUCT_CTX:/api/v1/product}
  status-path: ${OPENSHIFT_PRODUCT_STATUS_CTX:/actuator/health}

# =============================================
# stock api parameters
# ---------------------------------------------
stock:
  api-key-name: stock
  host: ${OPENSHIFT_STOCK_HOST:"stock-api.microservices-security.svc.cluster.local"}
  port: 8080
  context-path: ${OPENSHIFT_STOCK_CTX:/api/v1}
  status-path: ${OPENSHIFT_STOCK_STATUS_CTX:/actuator/health}

# =============================================
# supplier api parameters
# ---------------------------------------------
supplier:
  api-key-name: supplier
  # 3scale production route
  host: ${OPENSHIFT_SUPPLIER_HOST:"supplier-api-production.apps.arekkusu.io"}
  port: 443
  context-path: ${OPENSHIFT_SUPPLIER_CTX:/api/v1}
  status-path: ${OPENSHIFT_SUPPLIER_STATUS_CTX:/actuator/health}

# -------------------------------------------------------
# It is possible to use:
# grant-type: password (for a normal user)
# grant-type: client-credentials (for a service account)
# -------------------------------------------------------
# Description: used as mechanism to exchange the original
# token to another one that can be used to consumer
# supplier-api
# -------------------------------------------------------
keycloak-service-account:
  realm: ${OPENSHIFT_SVCACC_SSO_REALM:3scale-api}
  client-id: ${OPENSHIFT_SVCACC_SSO_CLIENT_ID:847d10c1}
  secret: ${OPENSHIFT_SVCACC_SSO_CLIENT_SECRET:4519d24a04b3d9093aa9129aa7711d9d}
  # only password and client_credentials are supported
  # client_credentials don't need username and password and can't be used to authenticate on 3scale managed clients
  # if your client is not managed by 3scale you're good to go with client_credentials, otherwise, use a user account.
  grant-type: ${OPENSHIFT_SVCACC_SSO_GRANT_TYPE:password}
  username: ${OPENSHIFT_SVCACC_SSO_USERNAME:8f314bfa_svcacc}
  password: ${OPENSHIFT_SVCACC_SSO_PASSWORD:12345}
  # if using self-signed certificate you must use HTTP and set required-ssl=none on keycloak realm
  # https://lists.jboss.org/pipermail/keycloak-user/2017-April/010386.html
  auth-server-uri: ${OPENSHIFT_SVCACC_SSO_AUTH_HOST:"https://sso73.apps.arekkusu.io/auth"}

# =============================================
# Authorization Settings (Keycloak)
# ---------------------------------------------
# NOTE. If using a self-signed certificate on RHSSO (Keycloak) a HTTPS endpoint will not work.
#
# Details:
# [ERROR] o.k.a.rotation.JWKPublicKeyLocator - Error when sending request to retrieve realm keys
# org.keycloak.adapters.HttpClientAdapterException: IO error
#
# So, in order to work properly, you must change to a unsecured protocol, using HTTP.
# Create a route on Openshift with the following:
#
# Hostname: authorization-server.apps.<YOUR-DOMAIN>
# Path: /
# Service: sso
# Secure Route: unchecked
#
# Also, in RHSSO realm settings, set 'Require SSL' to none on 'Login' tab.
# ---------------------------------------------

keycloak:
  cors: true
  ssl-required: ${OPENSHIFT_KEYCLOAK_SSL_REQUIRED:external}
  realm: ${OPENSHIFT_KEYCLOAK_REALM:3scale-api}
  resource: ${OPENSHIFT_KEYCLOAK_RESOURCE:8f314bfa}
  auth-server-url: ${OPENSHIFT_KEYCLOAK_AUTH_HOST:"https://sso73.apps.arekkusu.io/auth"}
  credentials:
    secret: ${OPENSHIFT_KEYCLOAK_RESOURCE_SECRET:2d1beebcf1c9d00dd51be7a344abd87f}
  use-resource-role-mappings: true
  security-constraints:
    - authRoles:
        - PRODUCT_ADMIN
      securityCollections:
        - name: CREATE
          patterns: /api/v1/product
          methods: POST
        - name: DELETE
          patterns: /api/v1/product/*
          methods: DELETE
        - name: PUT
          patterns: /api/v1/product/*
          methods: PUT
    - authRoles:
        - PRODUCT_BASIC
      securityCollections:
        - name: GET
          patterns: /api/v1/product/*
          methods: GET
        - name: LIST
          patterns: /api/v1/product
          methods: GET
    - authRoles:
        - CHECK_PRODUCT_STATUS
      securityCollections:
        - name: PRODUCT_STATUS
          patterns: /api/v1/product/status
          methods: GET
    - authRoles:
        - CHECK_SUPPLIER_STATUS
      securityCollections:
        - name: SUPPLIER_STATUS
          patterns: /api/v1/supplier/status
          methods: GET
    - authRoles:
        - CHECK_STOCK_STATUS
      securityCollections:
        - name: STOCK_STATUS
          patterns: /api/v1/stock/status
          methods: GET
    - authRoles:
        - CHECK_INTEGRATION_STATUS
      securityCollections:
        - name: INTEGRATION_STATUS
          patterns: /api/v1/status
          methods: GET
    - authRoles:
        - SUPPLIER_MAINTAINER
      securityCollections:
        - name: SUPPLIER_MAINTAINER
          patterns: /api/v1/supplier/maintenance
          methods: GET
    - authRoles:
        - STOCK_MAINTAINER
      securityCollections:
        - name: STOCK_MAINTAINER
          patterns: /api/v1/stock/maintenance
          methods: GET
